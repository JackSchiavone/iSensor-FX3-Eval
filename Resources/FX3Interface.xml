<?xml version="1.0"?>
<doc>
<assembly>
<name>
FX3Interface
</name>
</assembly>
<members>
<member name="T:FX3Interface.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:FX3Interface.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:FX3Interface.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:FX3Interface.FX3Connection">
 <summary>
 Class for interfacing with the FX3 based eval platform. Implements IRegInterface and IPinFcns
 </summary>
</member>
<member name="P:FX3Interface.FX3Connection.CrcFirstIndex">
 <summary>
 Gets or sets the index of the first burst data word used in CRC calculations.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:FX3Interface.FX3Connection.CrcLastIndex">
 <summary>
 Gets or sets the index of the last burst data word used in CRC calculations.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:FX3Interface.FX3Connection.CrcResultIndex">
 <summary>
 Gets or sets the index of the word that contains the CRC result.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:FX3Interface.FX3Connection.WordCount">
 <summary>
 Gets or sets the number of 16 bit words that are transferred during the burst.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:FX3Interface.FX3Connection.TriggerReg">
 <summary>
 Gets or sets register that is used to trigger burst operation.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:FX3Interface.FX3Connection.ClearBurstMode">
 <summary>
 Takes interface out of burst mode by setting BurstMode to zero.
 </summary>
 <remarks></remarks>
</member>
<member name="M:FX3Interface.FX3Connection.SetupBurstMode">
 <summary>
 Puts interface into burst mode by setting burstMode to match word count.
 </summary>
 <remarks></remarks>
 <exception cref="T:System.InvalidOperationException">Thrown if word count has not been set.</exception>
</member>
<member name="M:FX3Interface.FX3Connection.#ctor(System.String,System.String,FX3Interface.FX3Connection.DeviceType)">
 <summary>
 Class Constructor. Loads IMU SPI settings and default values for the interface.
 </summary>
 <param name="SensorType">The sensor type. Valid inputs are IMU and ADcmXL. Default is IMU.</param>
</member>
<member name="M:FX3Interface.FX3Connection.Connect(System.String)">
 <summary>
 Attempts to initialize the selected FX3 board and loads the FX3 runtime firmware.
 </summary>
 <param name="deviceSn">Serial number of the device being connected to.</param>
</member>
<member name="M:FX3Interface.FX3Connection.Disconnect">
 <summary>
 This function sends a reset command to the specified FX3 board, or does nothing if no board is connected
 </summary>
</member>
<member name="P:FX3Interface.FX3Connection.ActiveFX3">
 <summary>
 Property which returns the active FX3 board.
 </summary>
 <returns>Returns active FX3 device ID if enumeration has been completed. Returns nothing otherwise.</returns>
</member>
<member name="P:FX3Interface.FX3Connection.ActiveFX3SerialNumber">
 <summary>
 Property which returns the serial number of the active FX3 board. 
 </summary>
 <returns>Returns the serial number of the active FX3 device.</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DetectedFX3s">
 <summary>
 Property which returns all FX3 boards detected on the system.
 </summary>
 <returns>All detected FX3 boards.</returns>
</member>
<member name="P:FX3Interface.FX3Connection.GetVersion">
 <summary>
 Property which reads the firmware version from the FX3
 </summary>
 <returns>The firmware version, as a string</returns>
</member>
<member name="P:FX3Interface.FX3Connection.SclkFrequency">
 <summary>
 The current SPI clock frequency, in MHZ
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.Cpol">
 <summary>
 The current FX3 SPI controller clock polarity setting (True - Idles High, False - Idles Low)
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.Cpha">
 <summary>
 The current FX3 SPI controller chip select phase
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.ChipSelectPolarity">
 <summary>
 The current chip select polarity (True - Active High, False - Active Low)
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.ChipSelectControl">
 <summary>
 The FX3 SPI controller chip select setting. Should be left on hardware control.
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.ChipSelectLeadTime">
 <summary>
 The number of SPI clock cycles before the SPI transaction that chip select is toggled to active.
 </summary>
 <returns>The current chip select lead time setting</returns>
</member>
<member name="P:FX3Interface.FX3Connection.ChipSelectLagTime">
 <summary>
 The number of SPI clock cycles after the transaction ends that chip select is toggled to idle.
 </summary>
 <returns>The current chip select lag time setting</returns>
</member>
<member name="P:FX3Interface.FX3Connection.IsLSBFirst">
 <summary>
 The FX3 SPI Controller LSB setting. The controller flips the bits depending on this setting.
 </summary>
 <returns>The current LSB First setting, as a boolean</returns>
</member>
<member name="P:FX3Interface.FX3Connection.WordLength">
 <summary>
 The FX3 SPI controller word length. Default is 8 (1 byte per word)
 </summary>
 <returns>The current word length</returns>
</member>
<member name="P:FX3Interface.FX3Connection.StallTime">
 <summary>
 Property to get/set the number of microseconds between words
 </summary>
 <returns>The current stall time, in microseconds</returns>
</member>
<member name="P:FX3Interface.FX3Connection.PartType">
 <summary>
 The DUT Type (single axis or three axis)
 </summary>
 <returns>Returns the DUTType. Defaults to 3 axis</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DrPolarity">
 <summary>
 The Data Ready polarity for streaming mode
 </summary>
 <returns>The data ready polarity, as a boolean (True - low to high, False - high to low)</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DrActive">
 <summary>
 If the data ready is used for register reads
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.ReadyPin">
 <summary>
 Property to get the data ready pin
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.TimerTickScaleFactor">
 <summary>
 Property to get the timer tick scale factor used for converting ticks to ms
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.SpiClockFrequencies">
 <summary>
 Gets the real SPI frequencies available with the FX3 SPI controller
 </summary>
 <returns>Returns a list of available frequencies, in MHz</returns>
</member>
<member name="P:FX3Interface.FX3Connection.NumFramesPurged">
 <summary>
 Gets the number of bad frames purged with a call to PurgeBadFrameData
 </summary>
 <returns>Number of frames purged from data array</returns>
</member>
<member name="P:FX3Interface.FX3Connection.SensorType">
 <summary>
 Gets the device type the FX3Interface was initialized for
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.PinExit">
 <summary>
 Gets and sets the pin exit configuration for exiting real-time stream mode. 
 </summary>
 <returns>Pin exit configuration (0 = Pin Exit Disabled, 1 = Pin Exit Enabled)</returns>
</member>
<member name="P:FX3Interface.FX3Connection.PinStart">
 <summary>
 Gets and sets the pin start configuration for starting real-time stream mode.
 </summary>
 <returns>Pin start configuration (0 = Pin Start Disabled, 1 = Pin Start Enabled</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadDRFreq(AdisApi.IPinObject,System.UInt32,System.UInt32)">
 <summary>
 Reads the measured DR value
 </summary>
 <param name="pin">The DR pin to measure</param>
 <param name="polarity">The edge to measure from. 1 - low to high, 0 - high to low</param>
 <param name="timeoutInMs">The timeout from when the pin measurement starts to when the function returns if the signal cannot be found</param>
 <returns>The DR frequency in Hz</returns>
</member>
<member name="P:FX3Interface.FX3Connection.GetBuffer">
 <summary>
 Gets one frame from the thread safe queue. Waits to return until a frame is available
 </summary>
 <returns>The frame, as a byte array</returns>
</member>
<member name="P:FX3Interface.FX3Connection.GetNumBuffersRead">
 <summary>
 Gets the number of buffers read in from the DUT in buffered streaming mode
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3Connection.BufferAvailable">
 <summary>
 Checks if a frame is available, or will be available soon in thread safe queue
 </summary>
 <returns>The frame availability</returns>
</member>
<member name="M:FX3Interface.FX3Connection.StopBurstStream">
 <summary>
 Stops a burst stream by setting the stream state variables
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.BurstStreamManager">
 <summary>
 This function reads burst stream data from the DUT over the streaming endpoint. It is intended to operate in its own thread, and should not be called directly.
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.StartGenericStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
 <summary>
 Starts a generic register stream
 </summary>
 <param name="addr">List of registers to read</param>
 <param name="numCaptures">Number of times to read the register list in each buffer</param>
 <param name="numBuffers">Total number of buffers to capture</param>
</member>
<member name="M:FX3Interface.FX3Connection.StopGenericStream">
 <summary>
 Stops a generic stream by setting the stream state variables
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.GenericStreamManager(System.Object)">
 <summary>
 This function pulls generic stream data from the FX3 over a bulk endpoint (DataIn). It is intended to run in its own thread,
 and should not be called by itself.
 </summary>
 <param name="BytesPerBuffer">The number of bytes per USB transaction</param>
</member>
<member name="M:FX3Interface.FX3Connection.StartRealTimeStreaming(System.UInt32)">
 <summary>
 This function starts real time streaming on the ADcmXLx021 (interface and FX3). Specifying pin exit is optional and must be 0 (disabled) or 1 (enabled)
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.StopRealTimeStreaming">
 <summary>
 This function stops real time streaming on the ADcmXLx021 (interface and FX3)
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.RealTimeStreamManager">
 <summary>
 This function pulls real time data from the DUT over the streaming endpoint. It is intended to operate in its own thread, and should not be called directly
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.PurgeBadFrameData">
 <summary>
 This function checks the CRC of each frame stored in the Stream Data Queue, and purges the bad ones
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.InitBoardList(System.Object,System.EventArgs)">
 <summary>
 Initializes the interrupt handlers for connecting/disconnecting boards and forces an FX3 list refresh
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:FX3Interface.FX3Connection.RefreshDeviceList">
 <summary>
 Refreshes the list of FX3 boards connected to the PC and flashes blinky firmware if necessary
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.usbList_DeviceAttached(System.Object,System.EventArgs)">
 <summary>
 Handles connect events generated by the Cypress USB library
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:FX3Interface.FX3Connection.usbList_DeviceRemoved(System.Object,System.EventArgs)">
 <summary>
 Handles disconnect events generated by the cypress USB library
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
</member>
<member name="M:FX3Interface.FX3Connection.ProgramSDRAM(System.String,CyUSB.CyFX3Device)">
 <summary>
 Loads the firmware image at the specified file path into the FX3 RAM
 </summary>
 <param name="FileName">The path to the FX3 firmware (.img)</param>
 <param name="boardId">The board ID to be programmed.</param>
</member>
<member name="M:FX3Interface.FX3Connection.FX3CodeRunning">
 <summary>
 Function which checks if the FX3 is connected and programmed
 </summary>
 <returns>A boolean indicating if the board is programmed</returns>
</member>
<member name="P:FX3Interface.FX3Connection.FirmwarePath">
 <summary>
 The path to the firmware .img file. Needs to be set before the FX3 can be programmed
 </summary>
 <returns>A string, represeting the path</returns>
</member>
<member name="P:FX3Interface.FX3Connection.BlinkFirmwarePath">
 <summary>
 Set/get the blink firmware .img file used for multi-board identification
 </summary>
 <returns>A string representing the path to the firmware on the user machine</returns>
</member>
<member name="P:FX3Interface.FX3Connection.GetBootStatus">
 <summary>
 Checks the boot status of the FX3 board by sending a vendor request
 </summary>
 <returns>The current connection status</returns>
</member>
<member name="P:FX3Interface.FX3Connection.FX3BoardAttached">
 <summary>
 Checks if there is a Cypress FX3 USB device connected to the system
 </summary>
 <returns>A boolean indicating if there is an FX3 attached</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ResetFX3(CyUSB.CyFX3Device)">
 <summary>
 Send a reset command to the FX3
 </summary>
 <param name="boardHandle">Handle of the board to be reset.</param>
</member>
<member name="M:FX3Interface.FX3Connection.CleanUpStreamers">
 <summary>
 Looks for and resets boards in streamer (application) mode. Should only be called at program start, after InitBoardList()
 </summary>
 Note: Should not be used if running multiple instances of the GUI.
</member>
<member name="M:FX3Interface.FX3Connection.WaitForStreamer(System.Int32)">
 <summary>
 Wait for a newly-programmed FX3 to enumerate as a streamer (application) device
 </summary>
 <param name="timeout">Optional timeout to wait for a board to re-enumerate.</param>
</member>
<member name="M:FX3Interface.FX3Connection.SetDefaultValues(FX3Interface.FX3Connection.DeviceType)">
 <summary>
 Sets the default values for the interface. Used in constructor and after FX3 reset.
 </summary>
 <param name="SensorType">Parameter to specify default device SPI settings. Valid options are IMU and ADcmXL</param>
</member>
<member name="M:FX3Interface.FX3Connection.isFirmwarePathValid(System.String@)">
 <summary>
 Checks to see if a provided firmware path is valid. Throws exception if it is not.
 </summary>
 <param name="path">The firmware path to check</param>
 <returns>A boolean indicating if the firmware path is valid</returns>
</member>
<member name="M:FX3Interface.FX3Connection.XferControlData(System.Byte[]@,System.Int32,System.Int32)">
 <summary>
 Performs a data transfer on the control endpoint with a check to see if the transaction times out
 </summary>
 <param name="buf">The buffer to transfer</param>
 <param name="numBytes">The number of bytes to transfer</param>
 <param name="timeout">The timeout time (in milliseconds)</param>
 <returns>Returns a boolean indicating if the transfer timed out or not</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ConfigureControlEndpoint(System.UInt16,System.Boolean)">
 <summary>
 Validates that the control endpoint is enumerated and configures it with some default values
 </summary>
 <param name="Reqcode">The vendor command reqcode to provide</param>
 <param name="toDevice">Whether the transaction is DIR_TO_DEVICE (true) or DIR_FROM_DEVICE(false)</param>
 <returns>A boolean indicating the success of the operation</returns>
</member>
<member name="M:FX3Interface.FX3Connection.GetFirmwareID">
 <summary>
 Gets the current firmware ID from the FX3
 </summary>
 <returns>Returns the firmware ID, as a string</returns>
</member>
<member name="M:FX3Interface.FX3Connection.CheckEndpointStatus">
 <summary>
 Checks that all the endpoints are properly enumerated
 </summary>
 <returns>A boolean indicating if the endpoints are properly enumerated</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ConfigureSPI(System.Int32)">
 <summary>
 Function which performs the SPI configuration option based on the current control endpoint setting
 </summary>
 <param name="clockFrequency">The SPI clock frequency, if it needs to be set</param>
</member>
<member name="M:FX3Interface.FX3Connection.GetBoardSpiParameters">
 <summary>
 Function to read the current SPI parameters from the FX3 board
 </summary>
 <returns>Returns a SPIConfig struct representing the current board configuration</returns>
</member>
<member name="M:FX3Interface.FX3Connection.WriteBoardSpiParameters">
 <summary>
 Function which writes the current SPI config to the FX3
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.ResetEndpoints">
 <summary>
 Resets all the currently configured endpoints on the FX3.
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.EnumerateEndpoints">
 <summary>
 Enumerates all the FX3 endpoints used
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.CheckConnectionSpeed">
 <summary>
 Checks that the board is enumerated and connected via USB 2.0 or 3.0
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.BootloaderBlinkLED(System.String)">
 <summary>
 BOOTLOADER FW: Blink the onboard LED
 </summary>
 <param name="sn">Serial number of the selected board</param>
</member>
<member name="M:FX3Interface.FX3Connection.BootloaderTurnOffLED(System.String)">
 <summary>
 BOOTLOADER FW: Turn off the LED
 </summary>
 <param name="sn">Serial number of the selected board</param>
</member>
<member name="M:FX3Interface.FX3Connection.BootloaderTurnOnLED(System.String)">
 <summary>
 BOOTLOADER FW: Turn on the LED
 </summary>
 <param name="sn">Serial number of the selected board</param>
</member>
<member name="M:FX3Interface.FX3Connection.calcCCITT16(System.Byte[])">
 <summary>
Expecteds bytes in the order they are clocked out of ADcmXLx021
CRC-16-CCITT, initialized with crc = 0xFFFF, No final XOR.
Limit crc accumulation to 16 bits to prevent U32 overflow.
 </summary>
 <param name="ByteData">The input data set to calculate the CRC of</param>
 <returns>The CRC value for the input array</returns>
</member>
<member name="M:FX3Interface.FX3Connection.calcCCITT16(System.UInt16[])">
 <summary>
 Overload for CRC calculation which takes UShort array
 </summary>
 <param name="UShortData">The data to calculate CRC for</param>
 <returns>The CRC value</returns>
</member>
<member name="M:FX3Interface.FX3Connection.CheckDUTCRC(System.UInt16[]@)">
 <summary>
 Checks the CRC for a real time frame
 </summary>
 <param name="frame">The frame to check</param>
 <returns>A boolean indicating if the accel. data CRC matches the frame CRC</returns>
</member>
<member name="M:FX3Interface.FX3Connection.PulseDrive(AdisApi.IPinObject,System.UInt32,System.Double,System.UInt32)">
 <summary>
 This function drives a pin to the specified level for a given time interval in ms
 </summary>
 <param name="pin">The FX3PinObject for the pin to drive</param>
 <param name="polarity">The level to drive the pin to. 1 - high, 0 - low</param>
 <param name="pperiod">The time to drive the pin for, in ms</param>
 <param name="mode">Not implemented</param>
</member>
<member name="M:FX3Interface.FX3Connection.PulseWait(AdisApi.IPinObject,System.UInt32,System.UInt32,System.UInt32)">
 <summary>
 This function waits for a pin to reach a specified level
 </summary>
 <param name="pin">The pin to poll</param>
 <param name="polarity">The level to wait for. 1 - high, 0 - low</param>
 <param name="delayInMs">The delay from the start of the function call to when the pin polling starts</param>
 <param name="timeoutInMs">The timeout from when the pin polling starts to when the function returns, if the desired level is never reached</param>
 <returns>The total time waited (including delay) in ms</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadPin(AdisApi.IPinObject)">
 <summary>
 Reads the value of a GPIO pin on the FX3
 </summary>
 <param name="pin">The pin to read, as a FX3PinObject</param>
 <returns>The pin value - 1 is high, 0 is low</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadPins(AdisApi.IPinObject[])">
 <summary>
 Reads a list of FX3 GPIO pins. This function calls the overload which takes an IEnumerable
 </summary>
 <param name="pins">An array of FX3PinObjects to read</param>
 <returns>The pin values, as a UInteger. The first pin is in bit 0, second is in bit 1, and so on</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadPins(System.Collections.Generic.IEnumerable{AdisApi.IPinObject})">
 <summary>
 Reads a list of FX3 GPIO pins
 </summary>
 <param name="pins">An enumerable list of FX3PinObjects to read (maximum of 32)</param>
 <returns>The pin values, as a UInteger. The first pin is in bit 0, second is in bit 1, and so on</returns>
</member>
<member name="M:FX3Interface.FX3Connection.SetPin(AdisApi.IPinObject,System.UInt32)">
 <summary>
 Sets the value of a FX3 GPIO pin. This value will perist until the pin is set to a different value, or read from
 </summary>
 <param name="pin">The FX3PinObject pin to read</param>
 <param name="value">The polarity to set the pin to, 1 - high, 0 - low</param>
</member>
<member name="P:FX3Interface.FX3Connection.ResetPin">
 <summary>
 Readonly property to get the reset pin (mapped to GPIO 0 on FX3)
 </summary>
 <returns>The reset pin, as an IPinObject</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DIO1">
 <summary>
 Readonly property to get the DIO1 pin (mapped to GPIO 4 on FX3)
 </summary>
 <returns>Returns the DIO1 pin, as an IPinObject</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DIO2">
 <summary>
 Readonly property to get the DIO2 pin (mapped to GPIO 3 on FX3)
 </summary>
 <returns>Returns the DIO2 pin, as an IPinObject</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DIO3">
 <summary>
 Readonly property to get the DIO3 pin (mapped to GPIO 2 on FX3)
 </summary>
 <returns>Returns the DIO3 pin, as an IPinObject</returns>
</member>
<member name="P:FX3Interface.FX3Connection.DIO4">
 <summary>
 Readonly property to get the DIO4 pin (mapped to GPIO 1 on FX3)
 </summary>
 <returns>Returns the DIO4 pin, as an IPinObject</returns>
</member>
<member name="P:FX3Interface.FX3Connection.burstMode">
 <summary>
 Switches burstMode on and off. Set burstMode to the number of burst read registers. 
 </summary>
 <returns>The number of burst read registers.</returns>
</member>
<member name="P:FX3Interface.FX3Connection.StreamTimeoutSeconds">
 <summary>
 Sets the timeout for the Bulk Endpoint used in real time streaming modes
 </summary>
 <returns>The timeout time, in seconds</returns>
</member>
<member name="M:FX3Interface.FX3Connection.Reset">
 <summary>
 Drives the Reset pin low for 500ms and then sleeps for another 500ms
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.StartBufferedStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32,System.Int32,System.ComponentModel.BackgroundWorker)">
 <summary>
 Starts a buffered stream operation. For ADcmXLx021 products, StartRealTimeStreaming is used. For other products, StartGenericStream
 is used, and the stream parameters are determined by addr and numcaptures. This function blocks until the stream is complete, or the
 streaming operation is cancelled using the BackgroundWorker.
 </summary>
 <param name="addr">The list of register addresses to read from, when PartType is not ADcmXLx021</param>
 <param name="numCaptures">The number of reads to perform on each register listed in addr</param>
 <param name="numBuffers">The total number of buffers to read. One buffer is either a frame or a set of register reads</param>
 <param name="timeoutSeconds">The bulk endpoint timeout time</param>
 <param name="worker">A Background worker object which can be used by a GUI to track the current stream status and send cancellation requests</param>
</member>
<member name="M:FX3Interface.FX3Connection.StopStream">
 <summary>
 Stops the currently running stream, if any
 </summary>
</member>
<member name="M:FX3Interface.FX3Connection.GetBufferedStreamDataPacket">
 <summary>
 This function returns a single buffered stream packet. Needed for IBufferedStreamProducer
 </summary>
 <returns>The stream data packet, as a short</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegArrayStream(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32,System.UInt32)">
 <summary>
 This 
 </summary>
 <param name="addr"></param>
 <param name="numCaptures"></param>
 <param name="numBuffers"></param>
 <returns></returns>
</member>
<member name="M:FX3Interface.FX3Connection.WriteRegByte(AdisApi.AddrDataPair)">
 <summary>
 This function writes a single register byte, given as an Address / Data pair
 </summary>
 <param name="addrData">The AddrDataPair to be written</param>
</member>
<member name="M:FX3Interface.FX3Connection.WriteRegByte(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair})">
 <summary>
 This function writes an enumerable list of data to the DUT as AddrDataPairs
 </summary>
 <param name="addrData">The list of AddrDataPair to be written to DUT</param>
</member>
<member name="M:FX3Interface.FX3Connection.WriteRegByte(System.UInt32,System.UInt32)">
 <summary>
 This is the most general WriteRegByte, which the others are based on
 </summary>
 <param name="addr">The address to write to</param>
 <param name="data">The byte of data to write</param>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32})">
 <summary>
 Reads an array of 16 bit register values using the bulk in endpoint
 </summary>
 <param name="addr">The list of registers to read</param>
 <returns>The register values, as a UShort array</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegArray(System.Collections.Generic.IEnumerable{AdisApi.AddrDataPair},System.UInt32)">
 <summary>
 ReadRegArray overload which includes register writes. Breaks the call into multiple calls of readRegByte and writeRegByte
 </summary>
 <param name="addrData">The data to read/write</param>
 <param name="numCaptures">The number of times to perform the read/write operation</param>
 <returns>The output data, as a UShort array</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegArray(System.Collections.Generic.IEnumerable{System.UInt32},System.UInt32)">
 <summary>
 Overload of ReadRegArray which builds a new IEnumerable of addr and call the overload which takes an enumerable of addr
 </summary>
 <param name="addr">List of register address's to read</param>
 <param name="numCaptures">Number of captures to perform on the register list</param>
 <returns>The register values, as a short array</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegByte(System.UInt32)">
 <summary>
 This is the most general ReadRegByte. Other implementations are based on this.
 </summary>
 <param name="addr">The address to read</param>
 <returns>Returns the value read in over SPI as a short</returns>
</member>
<member name="M:FX3Interface.FX3Connection.ReadRegWord(System.UInt32)">
 <summary>
 Reads a single 16 bit register on the DUT
 </summary>
 <param name="addr">The address of the register to read</param>
 <returns>The 16 bit register value, as a UShort</returns>
</member>
<member name="T:FX3Interface.SPIConfig">
 <summary>
 Class for all the programmable SPI configuration options on the FX3 when using ADcmXL devices
 </summary>
</member>
<member name="P:FX3Interface.SPIConfig.SCLKFrequency">
 <summary>
 Property to store the current SPI clock. Updates the StallTime when set.
 </summary>
 <returns>The current SPI clock frequency</returns>
</member>
<member name="P:FX3Interface.SPIConfig.StallTime">
 <summary>
 Property to get/set the stall time (in microseconds)
 </summary>
 <returns>The current stall time setting, in microseconds</returns>
</member>
<member name="P:FX3Interface.SPIConfig.StallCycles">
 <summary>
 Property to set the stall time, in terms of SPI clock cycles
 </summary>
 <returns>The current stall cycles</returns>
</member>
<member name="P:FX3Interface.SPIConfig.DataReadyPin">
 <summary>
 Property to get/set the data ready pin
 </summary>
 <returns>The ready pin, as an FX3PinObject</returns>
</member>
<member name="P:FX3Interface.SPIConfig.DataReadyPinFX3GPIO">
 <summary>
 Property to get/set the data ready FX3 GPIO number
 </summary>
 <returns>The GPIO number, as a UINT16</returns>
</member>
<member name="M:FX3Interface.SPIConfig.#ctor(FX3Interface.DeviceType)">
 <summary>
 Class Constructor, sets reasonable default values for IMU and ADcmXL devices
 </summary>
 <param name="SensorType">Optional parameter to specify default device SPI settings. Valid options are IMU and ADcmXL</param>
</member>
<member name="T:FX3Interface.SpiChipselectControl">
 <summary>
 Enum for the possible chip select modes
 </summary>
</member>
<member name="T:FX3Interface.DeviceType">
 <summary>
 Enum for determining the default device settings to be initialized
 </summary>
</member>
<member name="T:FX3Interface.SpiLagLeadTime">
 <summary>
 Enum for the possible chip select lag/lead times, in SPI clock cycles
 </summary>
</member>
<member name="T:FX3Interface.DUTType">
 <summary>
 Enum of the possible DUT types for the ADcmXLx021
 </summary>
</member>
<member name="T:FX3Interface.FX3PinObject">
 <summary>
 Object to store configuration information for a Cypress FX3 GPIO pin.
 </summary>
</member>
<member name="M:FX3Interface.FX3PinObject.#ctor">
 <summary>
 Creates a new instance of FX3PinObject
 </summary>
</member>
<member name="M:FX3Interface.FX3PinObject.#ctor(System.UInt32)">
 <summary>
 Creates a new instance of PinObject with the given pin Number.
 </summary>
 <param name="pinNumber">Number of FX3 GPIO Pin to Use</param>
</member>
<member name="M:FX3Interface.FX3PinObject.#ctor(System.UInt32,System.Boolean)">
 <summary>
 reates a new instance of PinObject with the given pin number and inversion.
 </summary>
 <param name="pinNumber">Number of FX3 GPIO Pin to Use</param>
 <param name="invert"></param>
</member>
<member name="P:FX3Interface.FX3PinObject.PinNumber">
 <summary>
 GPIO pin number for the FX3.
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3PinObject.Invert">
 <summary>
 True if pin logic is to be inverted.
 </summary>
 <returns></returns>
</member>
<member name="P:FX3Interface.FX3PinObject.pinConfig">
 <summary>
 Provides a FX3 Configuration word for the parameter array.
 </summary>
 <returns></returns>
</member>
<member name="M:FX3Interface.FX3PinObject.IPinObject_Equals(System.Object)">
 <summary>
 Returns true if instances contain the same pin configuration.
 </summary>
 <param name="obj">Object to be compared.</param>
 <returns></returns>
</member>
<member name="M:FX3Interface.FX3PinObject.IPinObject_GetHashCode">
 <summary>
 Returns a hash code
 </summary>
 <returns></returns>
</member>
<member name="M:FX3Interface.FX3PinObject.IPinObject_ToString">
 <summary>
 Returns a string representation of the FX3PinObject.
 </summary>
 <returns></returns>
</member>
</members>
</doc>
